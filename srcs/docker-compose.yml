version: '3'

services:
  init_media:
    image: alpine:latest
    user: root
    volumes:
      - ./volumes/static:/source
      - media_vol:/media
      - static_vol:/static_files
    command: sh -c "chown -R 101:101 /media && chmod -R 755 /media && chmod 1755 /media && chown -R 101:101 /static_files && chmod -R 755 /static_files && chmod 1755 /static_files && cp -r /source/* /static_files/"

  nginx:
    build: ./nginx
      #    image: nginx:latest
    container_name: nginx
    depends_on:
      - init_media
    restart: on-failure
    volumes:
      #  - nginx_data:/etc/nginx/conf.d
      - media_vol:/media
      - static_vol:/static_files
    networks:
      - backend
      - frontend
    ports:
      - "8080:8080"

  frontend:
    build: ./requirements/frontend
    container_name: frontend
    restart: on-failure
    env_file:
      - .env/.env.frontend
    depends_on:
      - nginx
    networks:
      - frontend
    volumes:
    - frontend_data:/app
    - /app/node_modules
    - static_vol:/app/static
#    environment:
#      - CHOKIDAR_USEPOLLING=true

  authentication:
    build: ./requirements/authentication
    container_name: authentication
    volumes:
      - ./requirements/authentication/src:/app
      - secrets_vol:/run/secrets:ro
      - media_vol:/app/media
      - static_vol:/app/static_files
    restart: on-failure
    env_file:
      - .env/.env.web
    depends_on:
      - postgres
        #        condition: service_healthy
      - redis
    networks:
      - backend

  pong:
    build: ./requirements/pong
    container_name: pong
    volumes:
      - ./requirements/pong/src:/app
    restart: on-failure
    depends_on:
      - nginx
      - redis
    networks:
      - backend
    
  tournament:
    build: ./requirements/tournament
    container_name: tournament
    volumes:
      - ./requirements/tournament:/app
    restart: on-failure
    depends_on:
      - nginx
      - postgres
    networks:
      - backend
    
  game_manager:
    build: ./requirements/game_manager
    container_name: game_manager
    volumes:
      - ./requirements/game_manager/src:/app
      - secrets_vol:/run/secrets:ro
    restart: on-failure
    env_file:
      - .env/.env.web
    depends_on:
      - nginx
    networks:
      - backend

  redis:
    image: redis:7.4
    container_name: redis
    restart: on-failure
    volumes:
      - redis_data:/data
    networks:
      - backend

  postgres:
    image: postgres:13
    container_name: postgres
    restart: on-failure
    env_file:
      - .env/.env.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - secrets_vol:/run/secrets:ro
      - ./postgres/:/docker-entrypoint-initdb.d/
    networks:
      - backend
    command: # pour les logs
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_connections=on"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: on-failure
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  frontend_data:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/frontend/data
      o: bind
  postgres_data:
  secrets_vol:
    driver: local
    driver_opts:
      type: none
      device: ./.secrets
      o: bind
  media_vol:
  static_vol:
  redis_data:
